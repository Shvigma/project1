from aiogram import Bot, Dispatcher, executor, types
from random import randint
from aiogram.dispatcher.storage import FSMContext
import logging
import time

ADMIN_ID = 5735462741  #  —Å–≤–æ–π ID


API_TOKEN = '8263535197:AAEnyQVmQHoz9Zq5-NUECLhfy79xcb7xtPU'

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['stop'], user_id=ADMIN_ID)
async def stop_bot(message: types.Message):
    await message.answer("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
    # –≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    await dp.storage.close()
    await dp.storage.wait_closed()
    await bot.session.close()
    exit(0)

# /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id=message.from_user.id
    user_name=message.from_user.first_name
    user_full_name=message.from_user.full_name
    logging.info(f'{user_full_name}{user_id}{user_name}{time.asctime()}')
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç {user_name}")
#—É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
@dp.message_handler(commands=['id'])
async def send_full_info(message: types.Message):
    user = message.from_user
    text = f"""
üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:

üÜî ID: `{user.id}`
üë§ –ò–º—è: {user.first_name}
üìõ –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
üìõ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üí¨ ID —á–∞—Ç–∞: `{message.chat.id}`
    """
    await message.reply(text, parse_mode="Markdown")


#  /help  
@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = """
–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
/start - –Ω–∞—á–∞—Ç—å
/help - –ø–æ–º–æ—â—å
/about - –æ –±–æ—Ç–µ
/number - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
/id - —É–∑–Ω–∞—Ç—å –≤—Å—é –∏–Ω—Ñ—É –æ —Å–µ–±–µ
    """
    await message.reply(help_text)

@dp.message_handler(commands=['number'])
async def send_number(message: types.Message):
    number = randint(1, 100)
    await message.reply(str(number))
    
@dp.message_handler(commands=['about'])
async def send_number(message: types.Message):
    about="""
    –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —ç–∫—Å–ø–µ—Ä–µ–º–µ–Ω–∞—Ç–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π aiogramm
    –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –∫–æ–º–∞–Ω–¥–∞—Ö –Ω–∞–ø–∏—à–∏—Ç–µ:
    /help
    
    """
    await message.reply(str(about))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def echo(message: types.Message):
    if '–ø—Ä–∏–≤–µ—Ç' in message.text.lower():
        await message.reply("–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç! üòä")
    else:
        await message.reply("–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + message.text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    executor.start_polling(dp, skip_updates=True)